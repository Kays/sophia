#!/usr/bin/env perl
#                   _     _       
#   ___  ___  _ __ | |__ (_) __ _ 
#  / __|/ _ \| '_ \| '_ \| |/ _` |
#  \__ \ (_) | |_) | | | | | (_| |
#  |___/\___/| .__/|_| |_|_|\__,_|
#  =========~|_|~=================
#
#       sophia Perl IRC bot

package sophia;
use strict;
use warnings;
require 5.10.0;

use FindBin qw($Bin);
use lib qq($Bin/../cpan/lib/perl5);
use lib qq($Bin/../lib);

use API::Config;
use API::Log qw(:ALL);
use Constants;
use Getopt::Long;
use Pod::Usage;
use POE qw(Component::IRC);
use POSIX qw(setsid);
use Protocol::IRC;

use feature qw(switch);


# do not run sophia as root
error_log('sophia', 'Do not run sophia as root.')   if $> == 0;

# for now, sophia does not support Windows
error_log('sophia', 'As of now, sophia does not support Windows.')  if $^O =~ /win/i;


our %BASE = (
    ROOT        => "$Bin/..",
    BIN         => $Bin,
    ETC         => "$Bin/../etc",
    HELP        => "$Bin/../help",
    MODULES     => "$Bin/../modules",
    VAR         => "$Bin/../var",
);

our %CONFIGURATIONS = (
    VERSION         => ['sophia-3.0.0', ''],
    MAIN_CONFIG     => "$BASE{ETC}/sophia.conf",
    MODULES_CONFIG  => "$BASE{ETC}/sophia.modules.conf",
    ACL_DB          => "$BASE{ETC}/sophia.acl.db",
    ALIAS_DB        => "$BASE{ETC}/sophia.alias.db",
    PID             => "$BASE{ETC}/sophia.pid",
    LOAD_ALIASES    => FALSE,
    IN_DEBUG_MODE   => TRUE,
);

my $full_version = `cd $BASE{ROOT} && git log -1 --pretty=format:'${CONFIGURATIONS{VERSION}->[0]} [%H] %cd'`;
if ($full_version)
{
    chomp $full_version;
    $CONFIGURATIONS{VERSION}->[1] = $full_version;
}

# missing config file?
error_log('sophia', 'Missing config file.')     if ! -e $CONFIGURATIONS{MAIN_CONFIG};


my %opts;
GetOptions(
    'config=s'      => \$opts{config},
    'debug|?'       => \$opts{debug},
    'help|?'        => \$opts{help},
    'man'           => \$opts{man},
    'modconfig=s'   => \$opts{modconf},
    'version'       => \$opts{version},
);

if ($opts{version})
{
    print $CONFIGURATIONS{VERSION}->[1] || $CONFIGURATIONS{VERSION}->[0];
    exit;
}

pod2usage(1)    if $opts{help};
pod2usage(
    -exitstatus     => 0,
    -verbose        => 2,
)   if $opts{man};

$CONFIGURATIONS{MAIN_CONFIG} = $opts{config}        if $opts{config} && -e $opts{config};
$CONFIGURATIONS{MODULES_CONFIG} = $opts{modconf}    if $opts{modconf} && -e $opts{modconf};
$CONFIGURATIONS{IN_DEBUG_MODE} = TRUE               if $opts{debug};

our %SOPHIA = (
    channels        => {},
    realname        => 'sophia',
    nick            => 'sophia',
    owner_name      => '',
    owner_host      => '',
    password        => '',
    port            => 6667,
    server          => 'irc.server.net',
    trigger         => '!',
    usermode        => '+i',
    username        => 'sophia',
    usessl          => FALSE,
);

API::Config::load_main_config();

my $pid;
unless ($CONFIGURATIONS{IN_DEBUG_MODE})
{
    $pid = fork();
    
    unless ($pid == 0)
    {
        print "sophia forked into the background with pid: $pid\n";
        _log('sophia', "sophia forked into the background with pid: $pid");

        open my $fh, '>', $CONFIGURATIONS{PID}
            or error_log('sophia', 'Unable to open pid file for writing.');
        print {$fh} $pid;
        close $fh;

        exit;
    }

    setsid or error_log('sophia', "sophia cannot start a new session $!");

    open STDIN, '<', '/dev/null'
        or error_log('sophia', "sophia cannot read /dev/null: $!\n");
    open STDOUT, '>>', '/dev/null'
        or error_log('sophia', "sophia cannot write to /dev/null: $!\n");

    # if var/sophia.err does not exist, create it
    if (! -e "$BASE{VAR}/sophia.err")
    {
        open my $fh, '>', "$BASE{VAR}/sophia.err"
            or error_log('sophia', "Unable to create var/sophia.err: $!\n");
        close $fh;
    }

    open STDERR, '>>', "$BASE{VAR}/sophia.err"
        or error_log('sophia', "sophia cannot write to var/sophia.err: $!\n");
}
else
{
    $pid = $$;
}

our $sophia = POE::Component::IRC->spawn(
    Nick        => $SOPHIA{nick},
    Username    => $SOPHIA{username},
    Password    => $SOPHIA{password},
    Ircname     => $SOPHIA{realname},
    Server      => $SOPHIA{server},
    Port        => $SOPHIA{port},
    UseSSL      => $SOPHIA{usessl},
) or error_log('sophia', "Unable to spawn POE::Component::IRC: $!\n");

POE::Session->create(
    inline_states => {
        _default            => \&Protocol::IRC::_default,
        _start              => \&Protocol::IRC::_start,
        _stop               => \&Protocol::IRC::_stop,
        irc_001             => \&Protocol::IRC::_001,
        irc_332             => \&Protocol::IRC::_332,
        irc_disconnected    => \&Protocol::IRC::_disconnected,
        irc_error           => \&Protocol::IRC::_error,
        #irc_join            => \&irc_join,
        #irc_kick            => \&irc_kick,
        #irc_msg             => \&irc_msg,
        #irc_nick            => \&irc_nick,
        #irc_notice          => \&irc_notice,
        #irc_part            => \&irc_part,
        #irc_public          => \&irc_public,
        #irc_quit            => \&irc_quit,
        irc_shutdown        => \&Protocol::IRC::_shutdown,
        irc_topic           => \&Protocol::IRC::_topic,
        sig_int             => \&Protocol::IRC::_sigint,
        #load_timers         => \&load_timers,
    },
    heap => {
        channels            => $SOPHIA{channels},
        sophia              => $sophia,
        channel_topics      => {},
        usermodes           => $SOPHIA{usermodes},
    },
);

POE::Kernel->run();
